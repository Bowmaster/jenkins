#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 1.0.0.{build}
environment:
  PowerShellGalleryApiKey:
    secure: 1dvlzHXj42LofdFsQADx+JH5T3rGvzgvcA2XzIWI/5h9TeCSD8EQU+ELD6PaXvOc
  GitHubPushFromPlagueHO:
    secure: T1YH80PnRtYOlW3XM6rYkavs91a+Dr37V9ln0OX1UrVYUoNHaJq0paGswPEWKraL
install:
  - ps: |
        Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        Install-Module -Name Pester -Repository PSGallery -Force
        Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force
        # Update AppVeyor Build Version by pulling from Manifest
        $ManifestPath = Join-Path -Path $ENV:APPVEYOR_BUILD_FOLDER -ChildPath 'Jenkins.psd1'
        $ManifestContent = Get-Content -Path $ManifestPath -Raw
        $Regex = '(?<=ModuleVersion\s+=\s+'')(?<ModuleVersion>.*)(?='')'
        $Matches = @([regex]::matches($ManifestContent, $Regex, 'IgnoreCase'))
        $version = $null
        if ($Matches)
        {
            $version = $Matches[0].Value
        }
        # new version
        $version = "$version.$env:APPVEYOR_BUILD_NUMBER"
        # update AppVeyor build
        Update-AppveyorBuild -Version $version
        # Set version number
        $newVersion = ("$($Matches.Value).{0}" -f $env:APPVEYOR_BUILD_NUMBER)
        $manifestContent = $ManifestContent -replace '(?<=ModuleVersion\s+=\s+'')(?<ModuleVersion>.*)(?='')', $newVersion
        Set-Content -Path $ManifestPath -Value $ManifestContent
        $readmePath = Join-Path -Path $ENV:APPVEYOR_BUILD_FOLDER -ChildPath 'Readme.md'
        $readmeContent = Get-Content -Path $readmePath -Raw
        $readmeContent = $readmeContent -replace '### Unreleased', "### $newVersion"
        Set-Content -Path $readmePath -Value $readmeContent
#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
          $testResultsFile = Join-Path -Path $ENV:APPVEYOR_BUILD_FOLDER -ChildPath 'TestsResults.xml'
          $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
          (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
          if (Test-Path -Path $ENV:APPVEYOR_BUILD_FOLDER\Jenkins\Artifacts) {
              Get-ChildItem "$ENV:APPVEYOR_BUILD_FOLDER\Jenkins\Artifacts\*.*" | Foreach-Object { Push-AppveyorArtifact $_ }
          }
          if ($res.FailedCount -gt 0) {
              throw "$($res.FailedCount) tests failed."
          }
#---------------------------------#
#      deployment configuration   #
#---------------------------------#

deploy_script:
  - ps: |
        # Creating project artifact
        $buildFolder = $ENV:APPVEYOR_BUILD_FOLDER
        $StagingFolder = Join-Path -Path $buildFolder -ChildPath 'Staging'
        $null = New-Item -Path $StagingFolder -Type directory
        $ModuleFolder = Join-Path -Path $StagingFolder -ChildPath 'Jenkins'
        $null = New-Item -Path $ModuleFolder -Type directory
        $VersionFolder = Join-Path -Path $ModuleFolder -ChildPath $ENV:APPVEYOR_BUILD_VERSION
        $null = New-Item -Path $VersionFolder -Type directory
        # Populate Version Folder
        $null = Copy-Item -Path (Join-Path -Path $buildFolder -ChildPath 'Jenkins.psd1') -Destination $VersionFolder
        $null = Copy-Item -Path (Join-Path -Path $buildFolder -ChildPath 'Jenkins.psm1') -Destination $VersionFolder
        $null = Copy-Item -Path (Join-Path -Path $buildFolder -ChildPath 'LICENSE') -Destination $VersionFolder
        $null = Copy-Item -Path (Join-Path -Path $buildFolder -ChildPath 'README.md') -Destination $VersionFolder
        $null = Copy-Item -Path (Join-Path -Path $buildFolder -ChildPath 'en-us') -Destination $VersionFolder -Recurse
        # Create zip artifact
        $zipFilePath = Join-Path -Path $buildFolder -ChildPath "${env:APPVEYOR_PROJECT_NAME}_${env:APPVEYOR_BUILD_VERSION}.zip"
        $null = Add-Type -assemblyname System.IO.Compression.FileSystem
        [System.IO.Compression.ZipFile]::CreateFromDirectory($StagingFolder, $zipFilePath)
        # Create Publish Script Artifact
        $PublishScriptName = $env:APPVEYOR_PROJECT_NAME + "." + $env:APPVEYOR_BUILD_VERSION + "_publish.ps1"
        $PublishScriptPath = Join-Path -Path $buildFolder -ChildPath $PublishScriptName
        Set-Content -Path $PublishScriptPath -Value "Publish-Module -Name 'Jenkins' -RequiredVersion ${env:APPVEYOR_BUILD_VERSION} -NuGetApiKey (Read-Host -Prompt 'NuGetApiKey')"
        @(
            # You can add other artifacts here
            $zipFilePath,
            $PublishScriptPath,
            $testResultsFile
        ) | % {
            Write-Host "Pushing package $_ as Appveyor artifact"
            Push-AppveyorArtifact $_
            Remove-Item -Path $_ -Force
        }
        Remove-Item -Path $_ -Force
        # If this is a build of the Master branch and not a PR push
        # then publish the Module to the PowerShell Gallery.
        if ((! $ENV:APPVEYOR_PULL_REQUEST_NUMBER) `
            -and ($ENV:APPVEYOR_REPO_BRANCH -eq 'master'))
        {
            Write-Host "Publishing Module to PowerShell Gallery"
            Copy-Item -Path $ModuleFolder -Destination ($ENV:PSModulePath -split ';')[0] -Recurse
            Get-PackageProvider -Name NuGet -ForceBootstrap
            Publish-Module -Name 'Jenkins' -RequiredVersion ${ENV:APPVEYOR_BUILD_VERSION} -NuGetApiKey $ENV:PowerShellGalleryApiKey -Confirm:$false
            # Remove Staging Folder
            $null = Remove-Item -Path $StagingFolder -Recurse -Force
            # Push the updated release to GitHub
            & git @('config','--global','credential.helper','store')
            Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:GitHubPushFromPlagueHO):x-oauth-basic@github.com`n"
            & git @('config','--global','user.email','plagueho@gmail.com')
            & git @('config','--global','user.name','Daniel Scott-Raynsford')
            Set-Location -Path $buildFolder
            & git @('add','.')
            & git @('commit','-m',"Releasing $NewVersion")
            & git @('tag',$NewVersion)
            & git @('push')
        }
